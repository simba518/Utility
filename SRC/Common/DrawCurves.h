#ifndef _DRAWCURVES_H_
#define _DRAWCURVES_H_

#include <string>
#include <sstream>
#include <fstream>
#include <assertext.h>
#include <Log.h>
using std::string;
using std::stringstream;

namespace UTILITY{

  /**
   * given a set of points (xi,yi), generate a python script to for drawing this
   * curve, and save it to a file.
   */
  template<class VECTOR>
  class PythonScriptDraw2DCurves{
  
  public:
	PythonScriptDraw2DCurves(const bool useLabel=false){
	  _useLabel = useLabel;
	}
	static bool write(const string fname,const VECTOR &y,const double dx=1.0,const double x0=0.0f,const string style=""){

	  VECTOR x(y.size());
	  for (int i = 0; i < x.size(); ++i){
		x[i] = x0+i*dx;
	  }
	  return write(fname,y,x,style);
	}
	static bool write(const string fname,const VECTOR &y,const VECTOR &x,const string style=""){
	  return realWrite(fname,defineCurve(y,x,"",style),false);
	}

	void setUseLabel(const bool useLabel){
	  _useLabel = useLabel;
	}
	bool add(const string name,const VECTOR &y,const double dx=1.0,const double x0=0.0f,const string style=""){

	  VECTOR x(y.size());
	  for (int i = 0; i < x.size(); ++i){
		x[i] = x0+i*dx;
	  }
	  return add(name,y,x,style);
	}
	bool add(const string name,const VECTOR &y,const VECTOR &x,const string style=""){
	  const string curve = defineCurve(y,x,name,style);
	  _curvesData = _curvesData + "\n" + curve;
	  return (curve.size() > 0);
	}
	bool write(const string fname,const string saveFigTo="")const{
	  return realWrite(fname,_curvesData,isUseLabel(),saveFigTo);
	}
	void clear(){
	  _curvesData.clear();
	}
	bool isUseLabel()const{
	  return _useLabel;
	}

  protected:
	static string head(){
	  const string line1("\"\"\"Script generated by PythonScriptDraw2DCurves.\"\"\"\n");
	  const string line2("import numpy as np\n");
	  const string line3("import matplotlib.pyplot as plt\n");
	  return line1+line2+line3;
	}
	static string end(bool useLabel,const string saveFigTo=""){
	  string e = "";
	  if (useLabel)
		e += string("plt.legend()\n");
	  if(saveFigTo.size()>0)
		e += string("plt.savefig(\"")+saveFigTo+"\"+\".png\")";
	  else
		e += string("plt.show()");
	  return e;
	}
	static string defineCurve(const VECTOR &y,const VECTOR &x,const string name="",const string style=""){

	  assert_eq(x.size(),y.size());
	  if(y.size() <= 0){
		ERROR_LOG("the input data is zero");
		return string("");
	  }

	  stringstream script;
	  const string xName = removeSpaces(name+"_x");
	  const string yName = removeSpaces(name+"_y");
	  const string labelCmd = string(",label=\'")+name+"\'";
	  const string styleCmd = style.size()>0?(string(",\'")+style+string("\'")):(string(""));
	  script<< xName << " = [" << x[0];
	  for (int i = 1; i < x.size(); ++i){
		script << "," << x[i];
	  }
	  script << "];\n";

	  script << yName << " = [" << y[0];
	  for (int i = 1; i < y.size(); ++i){
		script << "," << y[i];
	  }
	  script << "];\n";
	  script << "plt.plot("<<xName<<","<<yName<<styleCmd<<labelCmd<<");\n";
	  return script.str();
	}
	static bool realWrite(const string fname, const string curves,bool useLabel=true,const string saveFigTo=""){

	  const string script = head()+string("\n")+curves+end(useLabel,saveFigTo);
	  std::ofstream file;
	  file.open(string(fname+".py").c_str());
	  ERROR_LOG_COND("failed to open file for writing: "<<fname,file.is_open());
	  file << script;
	  const bool succ = file.is_open();
	  file.close();
	  return succ;
	}
	static string removeSpaces(const string ss){
	  string s = ss;
	  for (size_t i = 0; i < s.size(); ++i){
		if(s[i] == ' ' || s[i] == '\t'){
		  s[i] = '_';
		}
	  }
	  return s;
	}

  private:
	string _curvesData;
	bool _useLabel;
  };
}
#endif /* _DRAWCURVES_H_ */
