PROJECT(Utility C CXX)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
ADD_DEFINITIONS(-DPROJ_PATH="${CMAKE_SOURCE_DIR}")
ADD_DEFINITIONS(-DTEST_DATA_DIR="${CMAKE_SOURCE_DIR}/TestCase/TestData/")

# print log informations
ADD_DEFINITIONS(-DLOG_INFO)
ADD_DEFINITIONS(-DLOG_ERROR)
ADD_DEFINITIONS(-DLOG_WARN)
ADD_DEFINITIONS(-DLOG_DEBUG)
ADD_DEFINITIONS(-DLOG_TRACE)
ADD_DEFINITIONS(-DUSE_FUNC_TIMER)

# Debug and Release
SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -g -ggdb -Wall")
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3")

IF (NOT CMAKE_BUILD_TYPE)
  # release mode (default)
  MESSAGE("generate release version")
  SET(CMAKE_BUILD_TYPE "Release")
  SET(CMAKE_BUILD_TYPE_DIR "Release")

ELSEIF (CMAKE_BUILD_TYPE STREQUAL "RELEASE")
  # release mode (default)
  MESSAGE("generate release version")
  SET(CMAKE_BUILD_TYPE "Release")
  SET(CMAKE_BUILD_TYPE_DIR "Release")

ELSEIF(${CMAKE_BUILD_TYPE} STREQUAL "DEBUG")
  # debug mode
  MESSAGE("generate debug version")
  SET(CMAKE_BUILD_TYPE_DIR "Debug")
  SET(CMAKE_BUILD_TYPE "Debug")

ELSE(NOT CMAKE_BUILD_TYPE)
  # error report
  MESSAGE("error: unkown build type: " ${CMAKE_BUILD_TYPE})
  MESSAGE("candicates should be: " [DMSSE|MSSE|DEBUG])
  
ENDIF (NOT CMAKE_BUILD_TYPE)

MESSAGE("CMAKE_CXX_FLAGS_DEBUG: " ${CMAKE_CXX_FLAGS_DEBUG})
MESSAGE("CMAKE_CXX_FLAGS_RELEASE: " ${CMAKE_CXX_FLAGS_RELEASE})

SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/Lib/${CMAKE_BUILD_TYPE_DIR})
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/Bin/${CMAKE_BUILD_TYPE_DIR})

SET( CMAKE_MODULE_PATH
  "${PROJECT_SOURCE_DIR}/CMakeModules/;${CMAKE_MODULE_PATH}" )
INCLUDE(${PROJECT_SOURCE_DIR}/CMakeModules/CustomModules.cmake)

FIND_PACKAGE(OpenGL REQUIRED)

SET(Boost_USE_MULTITHREADED      ON)
FIND_PACKAGE( Boost COMPONENTS filesystem system REQUIRED)

FIND_PACKAGE(Eigen3 REQUIRED)
IF(EIGEN3_FOUND)
  INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIR})
ENDIF(EIGEN3_FOUND)

FIND_PACKAGE(CASADI)
IF(CASADI_FOUND)
  INCLUDE_DIRECTORIES(${CASADI_INCLUDE_DIR})
ENDIF(CASADI_FOUND)

SET(BLA_VENDOR "Goto")
FIND_PACKAGE(BlasLapack)

IF(NOT LAPACK_FOUND)
  SET(BLA_VENDOR "OpenBlas")
  FIND_PACKAGE(BlasLapack)
ENDIF(NOT LAPACK_FOUND)
IF(NOT LAPACK_FOUND)
  SET(BLA_VENDOR "Generic")
  FIND_PACKAGE(BlasLapack)
ENDIF(NOT LAPACK_FOUND)

FIND_PACKAGE(SuperLU2.0 REQUIRED)
FIND_PACKAGE(Arpack REQUIRED)
FIND_PACKAGE(Arpack++ REQUIRED)
IF(Arpack++_FOUND)
  INCLUDE_DIRECTORIES(${ARPACK++_INCLUDE_DIR})
ENDIF(Arpack++_FOUND)

FIND_PACKAGE(SuiteSparse REQUIRED)
IF(SUITESPARSE_FOUND)
  INCLUDE_DIRECTORIES(${SUITESPARSE_INCLUDE_DIRS})
ENDIF(SUITESPARSE_FOUND)

#####################################QT#####################################
FIND_PACKAGE(Qt4 COMPONENTS QtCore QtGui QtXml QtOpenGL REQUIRED )
FIND_PACKAGE(QGLViewer)
INCLUDE(${QT_USE_FILE})
ADD_DEFINITIONS(${QT_DEFINITIONS})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
#####################################QT#####################################

INCLUDE_FOR_PROJECT(${PROJECT_NAME}
  SRC/UI/Animation
  SRC/UI/Manipulation
  SRC/UI/Render
  SRC/UI/Shader
  SRC/UI/RecordAndPlay
  SRC/Common
  SRC/Math
  SRC/Cuda
  SRC/ElasticModel
  SRC/Collison
  SRC/ElasticModelReduced
  SRC/Collison/self-ccd
  )

SET(LIBDIR ${PROJECT_SOURCE_DIR}/Lib/${CMAKE_BUILD_TYPE_DIR})

# projects
ADD_SUBDIRECTORY(SRC)

# test projects
ADD_SUBDIRECTORY(TestCase)